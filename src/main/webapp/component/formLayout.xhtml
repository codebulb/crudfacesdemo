<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:demo="http://xmlns.jcp.org/jsf/composite/crudfacesdemo">
    <h:body>
        <ui:composition template="/feature.xhtml">
            <ui:define name="title">formLayout</ui:define>
            <ui:define name="status-label"><demo:status value="P"/></ui:define>
            <ui:define name="breadcrumb">
                <li>components</li>
            </ui:define>
            
            <ui:define name="p-intro">
                A container component to apply implicitly “form-like” (e.g. label / input / message) grid styling 
                of its child components using a (responsive) CSS layout with out-of-the-box support for Bootstrap 
                responsive form grid CSS classes.
            </ui:define>
            <ui:define name="text">
                <p>Modern interface stying is based on CSS, not HTML tables, because it
                embraces separation of design and functionality, and it enables
                sophisticated techniques such as responsive, mobile-friendly layouts. </p>
                <p>
                However, none of today’s available JSF (component) frameworks deliver
                an easy-to-use abstraction for styling components using these
                techniques. The built-in containers for JSF and PrimeFaces, e.g.
                <code>&lt;panelGrid&gt;</code>, are based on HTML tables. PrimeFaces
                provides <a href="http://www.primefaces.org/showcase/ui/panel/grid.xhtml">
                an additional set of CSS grid classes</a>, but they don’t seem to
                actually work responsively at all; also, they need to be applied
                explicitly.</p>
                <p>
                This is especially annoying as most JSF web applications typically make
                heavy use of quite simple grid-like form layouts, but using
                <code>&lt;panelGrid&gt;</code> or applying HTML tables / CSS explicitly is
                cumbersome and diminishes XHTML readability, especially when trying to
                align components in a certain way or when using “colspan” attributes.
                What we really want is a panelGrid, but which works with CSS classes
                and is built with responsiveness out-of-the box. This is what
                <code>&lt;cf:formLayout&gt;</code> provides.</p>
                <p>A <a href="http://www.bootsfaces.net/layout/panelgrids.jsf">similar component 
                is also included in the BootsFaces library</a>, but it seems
                far more basic and doesn’t come as real-world production-ready as  <code>&lt;cf:formLayout&gt;</code>.</p>
                <p>
                <code>&lt;cf:formLayout&gt;</code> implicitly applies the required CSS classes to its child
                components to build a simple form-like grid layout for a flexible
                amount of columns (default 2). It is preconfigured to use Bootstrap’s
                form-horizontal styling CSS classes with its base 12 grid system.</p>
                <p>
                <code>&lt;cf:formLayout&gt;</code> also includes the following features:</p>
                <ul>
                  <li><code>&lt;message&gt;</code>s are combined with their respective input
                component into one cell. This is typically desired because otherwise,
                non-present messages (which still render an empty cell) would create
                huge gaps in the UI.</li>
                  <li>Buttons are by default put in a “button bar” at the bottom
                of the layout. If you want a particular button to stay inline, add the
                <code>a:inline="true"</code> HTML5 pass-through attribute to it. If on the other
                hand you want a non-button component to be placed in the “button bar”,
                use the <code>a:buttonBar="true"</code> pass-through attribute.</li>
                  <li>Set the <code>a:colspan</code> HTML5 pass-through attribute on any component to achieve a 
                    “colspan” effect: The component will be placed in a cell which spans the 
                    number of columns provided whilst keeping the layout responsive.</li>
                </ul>
                <p>Note that <code>&lt;cf:formLayout&gt;</code> does not implement an actual HTML <code>&lt;form&gt;</code>,
                it’s really just for layouting purposes which leaves you the free
                choice of how to integrate it in an actual HTML form.</p>
                
                <h2>Global overrides</h2>
                <p>The <code>FormLayoutRenderer</code> class provides the following hooks to override
                its default configuration globally:</p>
                <ul>
                    <li><code>#MESSAGE_COMPONENT_SUBCELL_STYLE_CLASS</code>: The style class
                applied to the <code>&lt;div&gt;</code> container of an invalid component
                with a <code>&lt;message&gt;</code> attached. <i>Defaults to
                <code>BootstrapFormLayoutProvider#getMessageComponentSubCellStyleClass()</code>.</i></li>
                  <li><code>#MESSAGE_SUBCELL_STYLE_CLASS</code>: The style class applied to
                the <code>&lt;div&gt;</code> container of a <code>&lt;message&gt;</code>.
                <i>Defaults to
                <code>BootstrapFormLayoutProvider#getMessageSubCellStyleClass()</code>.</i></li>
                </ul>
                <p>You can use e.g. an eagerly loaded application scoped bean to apply a
                global configuration override:</p>
                <pre class="brush:java">
                    @Eager
                    @ApplicationScoped
                    public class GlobalApplicationConfig {
                        @PostConstruct
                        public void overrideCrudFacesConfig() {
                            FormLayoutRenderer.MESSAGE_COMPONENT_SUBCELL_STYLE_CLASS = &quot;col-lg-12&quot;;
                            FormLayoutRenderer.MESSAGE_SUBCELL_STYLE_CLASS = &quot;col-lg-12&quot;;
                        }
                    }
                </pre>
                
                <h2>Known restrictions</h2>
                <ul>
                    <li>Nesting <code>&lt;cf:formLayout&gt;</code>s is not supported.</li>
                    <li>Support for custom styling still is limited.</li>
                </ul>
                <p>These restrictions are most likely to be addressed and resolved in future CrudFaces versions.</p>
            </ui:define>
            
            <ui:define name="demo">
                <ui:include src="impl/formLayout.xhtml"/>
            </ui:define>
            
            <ui:define name="code-tabs">
                <p:tab title="index.xhtml">
                    <pre class="brush:xml">
&lt;p&gt;Note that as you resize the browser window, the components get re-arranged according to the Bootstrap responsive grid layout.&lt;/p&gt;
&lt;h:form id=&quot;simple&quot;&gt;
    &lt;p&gt;A simple formLayout.&lt;/p&gt;
    &lt;cf:formLayout styleClass=&quot;clearfix&quot; style=&quot;margin-bottom: 12px;&quot;&gt;
        &lt;p:outputLabel for=&quot;firstName&quot; value=&quot;\#{I18N['firstName']}&quot;/&gt;
        &lt;p:inputText id=&quot;firstName&quot; value=&quot;\#{formLayoutController.entity.firstName}&quot;/&gt;
        &lt;p:message for=&quot;firstName&quot;/&gt;
        &lt;p:outputLabel for=&quot;lastName&quot; value=&quot;\#{I18N['lastName']}&quot;/&gt;
        &lt;p:inputText id=&quot;lastName&quot; value=&quot;\#{formLayoutController.entity.lastName}&quot;/&gt;
        &lt;p:message for=&quot;lastName&quot;/&gt;
        &lt;p:commandButton value=&quot;\#{I18N['save']}&quot; update=&quot;@form&quot;/&gt;
    &lt;/cf:formLayout&gt;
&lt;/h:form&gt;

&lt;h:form id=&quot;groups&quot;&gt;
    &lt;p&gt;User-defined number of groups per row.&lt;/p&gt;
    &lt;cf:formLayout groups=&quot;2&quot; styleClass=&quot;clearfix&quot; style=&quot;margin-bottom: 12px;&quot;&gt;
        &lt;p:outputLabel for=&quot;firstName&quot; value=&quot;\#{I18N['firstName']}&quot;/&gt;
        &lt;p:inputText id=&quot;firstName&quot; value=&quot;\#{formLayoutController.entity.firstName}&quot;/&gt;
        &lt;p:message for=&quot;firstName&quot;/&gt;
        &lt;p:outputLabel for=&quot;lastName&quot; value=&quot;\#{I18N['lastName']}&quot;/&gt;
        &lt;p:inputText id=&quot;lastName&quot; value=&quot;\#{formLayoutController.entity.lastName}&quot;/&gt;
        &lt;p:message for=&quot;lastName&quot;/&gt;
        &lt;p:commandButton value=&quot;\#{I18N['save']}&quot; update=&quot;@form&quot;/&gt;
    &lt;/cf:formLayout&gt;
&lt;/h:form&gt;

&lt;h:form id=&quot;groupsRatios&quot;&gt;
    &lt;p&gt;User-defined group column aspect ratio.&lt;/p&gt;
    &lt;cf:formLayout groups=&quot;2&quot; groupRatios=&quot;2 10&quot; styleClass=&quot;clearfix&quot; style=&quot;margin-bottom: 12px;&quot;&gt;
        &lt;p:outputLabel for=&quot;firstName&quot; value=&quot;\#{I18N['firstName']}&quot;/&gt;
        &lt;p:inputText id=&quot;firstName&quot; value=&quot;\#{formLayoutController.entity.firstName}&quot;/&gt;
        &lt;p:message for=&quot;firstName&quot;/&gt;
        &lt;p:outputLabel for=&quot;lastName&quot; value=&quot;\#{I18N['lastName']}&quot;/&gt;
        &lt;p:inputText id=&quot;lastName&quot; value=&quot;\#{formLayoutController.entity.lastName}&quot;/&gt;
        &lt;p:message for=&quot;lastName&quot;/&gt;
        &lt;p:commandButton value=&quot;\#{I18N['save']}&quot; update=&quot;@form&quot;/&gt;
    &lt;/cf:formLayout&gt;
&lt;/h:form&gt;

&lt;h:form id=&quot;buttons&quot;&gt;
    &lt;p:defaultCommand target=&quot;saveAction&quot;/&gt;
    &lt;p&gt;User-defined button placement.&lt;/p&gt;
    &lt;cf:formLayout groups=&quot;2&quot; groupRatios=&quot;4 6 2&quot; styleClass=&quot;clearfix&quot; style=&quot;margin-bottom: 12px;&quot;&gt;
        &lt;p:outputLabel for=&quot;firstName&quot; value=&quot;\#{I18N['firstName']}&quot;/&gt;
        &lt;p:inputText id=&quot;firstName&quot; value=&quot;\#{formLayoutController.entity.firstName}&quot;/&gt;
        &lt;p:message for=&quot;firstName&quot;/&gt;
        &lt;p:commandButton value=&quot;Help&quot; a:inline=&quot;true&quot;/&gt;
        &lt;p:outputLabel for=&quot;lastName&quot; value=&quot;\#{I18N['lastName']}&quot;/&gt;
        &lt;p:inputText id=&quot;lastName&quot; value=&quot;\#{formLayoutController.entity.lastName}&quot;/&gt;
        &lt;p:message for=&quot;lastName&quot;/&gt;
        &lt;p:commandButton value=&quot;Help&quot; a:inline=&quot;true&quot;/&gt;
        &lt;p:commandButton id=&quot;saveAction&quot; value=&quot;\#{I18N['save']}&quot; update=&quot;@form&quot;/&gt;
        &lt;h:outputText a:buttonBar=&quot;true&quot; value=&quot;Please review your input carefully before clicking the save button.&quot;/&gt;
    &lt;/cf:formLayout&gt;
&lt;/h:form&gt;

&lt;h:form id=&quot;colspan&quot;&gt;
	&lt;p&gt;&lt;code&gt;a:colspan&lt;/code&gt; attribute.&lt;/p&gt;
	&lt;cf:formLayout groups=&quot;2&quot; groupRatios=&quot;4 6 2&quot; styleClass=&quot;clearfix&quot; style=&quot;margin-bottom: 12px;&quot;&gt;
		&lt;p:outputLabel for=&quot;firstName&quot; value=&quot;#{I18N['firstName']}&quot;/&gt;
		&lt;p:inputText a:colspan=&quot;2&quot; id=&quot;firstName&quot; value=&quot;#{formLayoutController.entity.firstName}&quot;/&gt;
		&lt;p:message for=&quot;firstName&quot;/&gt;
		&lt;p:outputLabel for=&quot;lastName&quot; value=&quot;#{I18N['lastName']}&quot;/&gt;
		&lt;p:inputText id=&quot;lastName&quot; value=&quot;#{formLayoutController.entity.lastName}&quot;/&gt;
		&lt;p:message for=&quot;lastName&quot;/&gt;
		&lt;p:commandButton value=&quot;Help&quot; a:inline=&quot;true&quot;/&gt;
		&lt;p:outputLabel for=&quot;comment&quot; value=&quot;#{I18N['comment']}&quot;/&gt;
		&lt;p:inputTextarea a:colspan=&quot;4&quot; id=&quot;comment&quot; value=&quot;#{formLayoutController.entity.comment}&quot;/&gt;
		&lt;p:message for=&quot;comment&quot;/&gt;
		&lt;p:commandButton value=&quot;Help&quot; a:inline=&quot;true&quot;/&gt;
		&lt;p:commandButton id=&quot;saveAction&quot; value=&quot;#{I18N['save']}&quot; update=&quot;@form&quot;/&gt;
	&lt;/cf:formLayout&gt;
&lt;/h:form&gt;
                    </pre>
                </p:tab>
                <p:tab title="FormLayoutController.java">
                    <pre class="brush:java">
@ViewScoped
@Named
public class FormLayoutController implements Serializable {
    private Customer entity = new Customer();

    public Customer getEntity() {
        return entity;
    }

    public void setEntity(Customer entity) {
        this.entity = entity;
    }
}
                    </pre>
                </p:tab>
            </ui:define>
            
            <ui:define name="documentation">
                <strong>VDL</strong>
                <ul>
                    <li><code><a href="http://codebulb.github.io/pages/crudfaces/vdldoc/cf/formLayout.html">cf:formLayout</a></code></li>
                </ul>
                <strong>Source code</strong>
                <ul>
                    <li><code><a href="https://github.com/codebulb/crudfaces/blob/master/src/main/java/ch/codebulb/crudfaces/component/FormLayout.java">FormLayout</a></code></li>
                    <li><code><a href="https://github.com/codebulb/crudfaces/blob/master/src/main/java/ch/codebulb/crudfaces/renderer/FormLayoutRenderer.java">FormLayoutRenderer</a></code></li>
                </ul>
            </ui:define>
        </ui:composition>
    </h:body>
</html>
