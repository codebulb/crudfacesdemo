<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      >
    <h:body>
        <ui:composition template="/feature.xhtml">
            <ui:define name="title">flashBeans</ui:define>
            <ui:define name="breadcrumb">
                <li>scopes</li>
            </ui:define>
            
            <ui:define name="p-intro">
                A wrapper bean to access any (request-scoped) bean as if it were in “flash scope”, 
                thus allowing changes to the bean to survive one redirect without touching the session at all.
            </ui:define>
            <ui:define name="text">
                <p>The flash scope, as introduced with JSF 2.0, is a handy tool in any
                    situation where any given backing bean value should survive just one
                    redirect. In this situation, request scope is too short, but any other
                    scope like view scope and session scope is much too long. Through my
                    own research, I have also learnt that 
                    <a href="http://www.codebulb.ch/2015/05/java-ee-7-bean-scopes-compared-part-2.html#lessons">
                        especially view scope is actually
                    buggy and can lead to major memory leaks</a>.</p>
                    <p>
                    Although overall useful, one disadvantage of flash scope is that it’s
                    not actually implemented as a true “bean scope” (with annotation), but
                    it’s simply a Map-like bean exposed to the JSF EL (<code>\#{flash}</code>), and read
                    / write access must be explicitly controlled.</p>
                    <p>
                    flashBeans is a wrapper for <code>\#{flash}</code>, and it’s also exposed via the JSF
                    EL (<code>\#{flashBeans}</code>), but it works completely different from vanilla
                    flash: Through flashBeans, you can access any (request-scoped) bean; if
                    it already is in the flash scope, the instance held in the flash scope
                    is returned, otherwise, the bean is looked up by its EL name (i.e. in
                    the bean container), put into the flash scope and returned. That way,
                    through flashBeans, you can transparently access and save beans from /
                    into flash scope.</p>
                    <p>
                    Because flashBean implements the Map interface, you can access any bean
                    simply by its EL name using the dot-notation, e.g.
                    <code>\#{flashBeans.personController}</code>. That way, you can locally turn any
                    request scoped bean into a “flash scoped” bean.</p>
                    <p>
                    Because JSF flash scope will not put anything into the HTTP session at
                    all, using this technique will help you prevent session polluting when
                    compared with alternative scopes such as view or session scope.</p>
            </ui:define>
            <ui:define name="demo"><ui:include src="impl/flashBeans.xhtml"/></ui:define>
            <ui:define name="code-tabs">
                <p:tab title="index.xhtml">
                    <pre class="brush:xml">
&lt;h:form&gt;
    &lt;p&gt;&lt;code&gt;@RequestScoped&lt;/code&gt; bean:&lt;/p&gt;
    &lt;cf:formLayout styleClass=&quot;clearfix&quot; style=&quot;margin-bottom: 12px;&quot;&gt;
        &lt;p:outputLabel for=&quot;text&quot; value=&quot;@RequestScoped bean text:&quot;/&gt;
        &lt;h:outputText id=&quot;text&quot; value=&quot;\#{requestScopedBean.text}&quot;/&gt;
        &lt;p:commandButton value=&quot;Update text and reload&quot; action=&quot;\#{requestScopedBean.updateText()}&quot; ajax=&quot;false&quot;/&gt;
    &lt;/cf:formLayout&gt;

    &lt;p&gt;&lt;code&gt;@RequestScoped&lt;/code&gt; bean used with &lt;code&gt;\\#{flashBeans}&lt;/code&gt;:&lt;/p&gt;
    &lt;cf:formLayout&gt;
        &lt;p:outputLabel for=&quot;textFlash&quot; value=&quot;@RequestScoped bean text:&quot;/&gt;
        &lt;h:outputText id=&quot;textFlash&quot; value=&quot;\#{flashBeans.requestScopedBean.text}&quot;/&gt;
        &lt;p:commandButton value=&quot;Update text and reload&quot; action=&quot;\#{flashBeans.requestScopedBean.updateText()}&quot; ajax=&quot;false&quot;/&gt;
    &lt;/cf:formLayout&gt;
&lt;/h:form&gt;
                    </pre>
                </p:tab>
                <p:tab title="RequestScopedBean.java">
                    <pre class="brush:java">
@RequestScoped
@Named
public class RequestScopedBean {
    private String text = &quot;(no text set)&quot;;

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }
    
    public String updateText() {
        text = &quot;I'm a @RequestScoped controller.&quot;;
        return &quot;flashBeans.xhtml?faces-redirect=true&quot;;
    }
}
                    </pre>
                </p:tab>
            </ui:define>
            
            <ui:define name="documentation">
                <strong>Source code</strong>
                <ul>
                    <li><code><a href="https://github.com/codebulb/crudfaces/blob/master/src/main/java/ch/codebulb/crudfaces/scopes/FlashBeans.java">FlashBeans</a></code></li>
                </ul>
            </ui:define>
        </ui:composition>
    </h:body>
</html>
